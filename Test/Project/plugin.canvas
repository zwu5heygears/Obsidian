{
	"nodes":[
		{"id":"c73453ec546d3561","type":"text","text":"杂项线程用途是什么？系统相关配置，为什么要独立于服务线程，什么业务需要放在里面\n\n\nWindows下不适用unload卸载插件，和内存访问有关，是否和quit有关系。测试一下\n\n1. gui线程在主线程，为什么使用队列连接（默认是在接受范围者所在的线程，可以改为直接连接吗）\n2. 线程池没有使用？\n3. 为什么析构没有被调用\n4. 框架中的kill函数怎么不用\nmsg的结构中，address对于PUblish没用到，addpublish需要，uuid,时间戳的用途在哪\n并没有使用topiclist，如何使用，需要提前注册吗，不需要的话为什么有，没有使用int类型的topic（在topiclist中查找使用的方式）(publish等可以提前注册到其中) 统一注册\n\n为什么会出现等待部分时间插件才终止（quit）\n\n\nMessage结构中的to没有使用? 目前维护订阅列表不需要，那有需要的情况吗\n\n3. 一个Plugin中为什么有多个objects？？？是否可以使用多个类导致一个插件多个object\n目前看到的都是一个插件里面一个object（class）,这么做的目的是什么，什么情况下会用？\n而且每个object都在一个单独的线程\n\n分发器的address有必要在里面吗，唯一调用的时候object属性已经设置了，是为了后期分发器有什么作用吗\n有关于Invoke的topic绑定、移除、句柄响应都需要加锁（同个线程）为什么\nInVoke是在发布者自己的线程中执行，并且会阻塞（同步），addInvoke在路由中增加订阅者时不 不需要锁，但是在分发器中bind时需要加锁，（如果有多个插件同时Invoke，应当进行在被InVoke的线程中阻塞）\n为什么使用限时读写锁?那些地方用了锁，为什么用\n连接和解除信号槽的时候加了锁，为什么？\n添加插件到容器中也用到了锁，但是这是主线程单个线程内。\n\n对插件分配线程中使用了movetoThread，导致成员变量中的指针不会移动到新的线程，但是（QTimer这种\n构造，init都在主线程，run和kill都在插件线程\n4. 为什么address--bject的列表用弱引用，考虑是为了什么时候\n这个框架的优缺点是什么，第三代框架有吗，怎么改进的\n","x":-1120,"y":-1220,"width":973,"height":946},
		{"id":"be7c705f2273114b","type":"text","text":"threadssingleton.h\n实现一个线程安全的单例类","x":-552,"y":-220,"width":280,"height":172},
		{"id":"19001283cdfcfb7c","type":"text","text":"ultralbus","x":-703,"y":40,"width":161,"height":60},
		{"id":"9b418498b1f86f47","type":"text","text":"dispatcher.h\n分发器\n\n分发器的作用是为了绑定topic和函数句柄之间的调用关系\n1. topic和句柄绑定、解绑、查询、\n2. Invoke和Notify的实现（调用topic绑定的函数）\n3. 设置和查询address、更新topic列表\n\n\n","x":-1585,"y":920,"width":540,"height":280},
		{"id":"0da13bc01ba700c6","type":"text","text":"object.h(继承QObject)\n导出dll+lib\n1. 创建一个分发器new（this)\n2. 定义插件类型、地址；\n3. 定义订阅、发布、调用、添加调用、添加订阅、日志输出及虚函数run、kill、Init\n","x":-1488,"y":1280,"width":347,"height":269},
		{"id":"bc7687771792584e","type":"text","text":"container.h(继承QObject)\n初始化了Singleton，使用trylock\n加载和维护全部插件（filename）\n\n设置插件文件夹、加载全部插件并运行、分配插件线程、在路由中注册插件并运行、移除所有插件（路由分离、线程释放\n","x":-1485,"y":2560,"width":341,"height":260},
		{"id":"f0431671cbe40543","type":"text","text":"global.h\n定义一个宏，负责导出dll和lib\n","x":-739,"y":217,"width":233,"height":172},
		{"id":"88b42465584fd619","type":"text","text":"addres.h\nQString别名Address","x":-1440,"y":214,"width":250,"height":172},
		{"id":"a7d6e6114c935689","type":"text","text":"message.h\n1. 定义message结构（uuid, from, to, topic, data, timestamp)\n2. 定义句柄（函数指针）:\n NotifyHandler(void)\n InvokeHandler(QVariant)\n3. 声明Message为Qvariant（方便在Publish和Invoke中使用）\n\naddress：标志订阅者（异步或同步，addsubrite和addInVoke）\nuuid,timestamp 没有用到，每次的msg uuid和timestamp都不同\nfrom 只有add相关的用到了此address\ndata 数据信息\n\n","x":-1607,"y":440,"width":585,"height":434},
		{"id":"6f5de1b35338a76a","type":"text","text":"logger.h\nLogger封装QLoggingCategory，日志管理","x":-1000,"y":-220,"width":313,"height":172},
		{"id":"6a5b93565c27340a","type":"text","text":"register.h\n\n导出插件dll\n定义注册宏，注册服务、杂项、gui插件\nRegisterObject插件注册；\nRegisterVersion版本注册；\nRegisterTopicstopic注册；\n\n","x":-2110,"y":1282,"width":374,"height":265},
		{"id":"ca2331f8af5f3df6","type":"text","text":"ultrabus.h\n提供注册插件头文件及插件父类object，\n如果定义ULTRABUS_APP则添加service.h头文件","x":-2053,"y":1714,"width":260,"height":206,"color":"2"},
		{"id":"ca1843fe497be6f2","type":"text","text":"plugin.h(继承QLibrary)\n1. 插件属性设置（address,flag)\n2. 插件加载和卸载\n3. 插件运行","x":-1510,"y":1756,"width":390,"height":164},
		{"id":"a7240897af04a67f","type":"text","text":"singleton.h\n单例类\n有关于共享内存处理的类，(检测程序是否多次启动)\n","x":-700,"y":2602,"width":260,"height":177},
		{"id":"92f7993771077e6b","type":"text","text":"router.h (继承QObject)\n1. 维护一个插件列表，订阅发布、订阅、直接调用的规则后开启插件\n2. 解除全部信号槽连接\n3. 维护topic订阅列表（addsub,addinvoke)，并在此处添加新的订阅者（Invoke只需要一个）\n4. 移除订阅的插件地址","x":-1780,"y":2120,"width":420,"height":299},
		{"id":"7d9c339c0f3993c3","type":"text","text":"service.h\n1. 构造时初始化了container，\n（程序退出时触发container重置方法，卸载全部插件、重置线程）\n2. 加载所有插件运行\n3. 卸载插件（未使用）","x":-1041,"y":3040,"width":384,"height":240,"color":"4"},
		{"id":"bab1253eee40d4ba","type":"text","text":"ultralib","x":-317,"y":40,"width":170,"height":58},
		{"id":"8c07a554c7fd1c0e","type":"text","text":"日志库（log4qt）\n崩溃检测库（qbreakpad）\n压缩库（quazip）\n加密库（ares)","x":-383,"y":228,"width":302,"height":150},
		{"id":"df3fe4733e137c66","type":"text","text":"threads.h (继承QObject)\n维护服务线程队列和杂项线程队列，负责线程队列初始化、插件线程分配（gui处于主线程）、插件线程开始结束、线程回收","x":-1260,"y":2120,"width":431,"height":299}
	],
	"edges":[
		{"id":"66a473d5208fff70","fromNode":"19001283cdfcfb7c","fromSide":"bottom","toNode":"f0431671cbe40543","toSide":"top"},
		{"id":"53f37af126ea0984","fromNode":"19001283cdfcfb7c","fromSide":"bottom","toNode":"88b42465584fd619","toSide":"top"},
		{"id":"04fde25b0d283eb5","fromNode":"88b42465584fd619","fromSide":"bottom","toNode":"a7d6e6114c935689","toSide":"top"},
		{"id":"45b6f14eb0b16dfa","fromNode":"a7d6e6114c935689","fromSide":"bottom","toNode":"9b418498b1f86f47","toSide":"top"},
		{"id":"4167a2e70ba22833","fromNode":"19001283cdfcfb7c","fromSide":"bottom","toNode":"a7240897af04a67f","toSide":"top"},
		{"id":"539f8ba3e9c41257","fromNode":"9b418498b1f86f47","fromSide":"bottom","toNode":"0da13bc01ba700c6","toSide":"top"},
		{"id":"8ee610fa9704ba5f","fromNode":"f0431671cbe40543","fromSide":"bottom","toNode":"0da13bc01ba700c6","toSide":"right"},
		{"id":"a87d51824c66f865","fromNode":"0da13bc01ba700c6","fromSide":"bottom","toNode":"ca1843fe497be6f2","toSide":"top"},
		{"id":"62c9fb05eeea247b","fromNode":"0da13bc01ba700c6","fromSide":"left","toNode":"6a5b93565c27340a","toSide":"right"},
		{"id":"ffbdd1296209f881","fromNode":"ca1843fe497be6f2","fromSide":"left","toNode":"6a5b93565c27340a","toSide":"right"},
		{"id":"44c9f6c0dcfb9771","fromNode":"ca1843fe497be6f2","fromSide":"bottom","toNode":"92f7993771077e6b","toSide":"top"},
		{"id":"999cfbf1603b99b2","fromNode":"ca1843fe497be6f2","fromSide":"bottom","toNode":"df3fe4733e137c66","toSide":"top"},
		{"id":"8f816da68b9e56d0","fromNode":"df3fe4733e137c66","fromSide":"bottom","toNode":"bc7687771792584e","toSide":"top"},
		{"id":"de4e1fa21b37c729","fromNode":"92f7993771077e6b","fromSide":"bottom","toNode":"bc7687771792584e","toSide":"top"},
		{"id":"fdbb68d209d1325d","fromNode":"ca1843fe497be6f2","fromSide":"bottom","toNode":"bc7687771792584e","toSide":"top"},
		{"id":"78c95aea783b6900","fromNode":"bc7687771792584e","fromSide":"bottom","toNode":"7d9c339c0f3993c3","toSide":"top"},
		{"id":"54854ce4575d9ae0","fromNode":"f0431671cbe40543","fromSide":"bottom","toNode":"7d9c339c0f3993c3","toSide":"top"},
		{"id":"e68ef2da7601b525","fromNode":"0da13bc01ba700c6","fromSide":"bottom","toNode":"ca2331f8af5f3df6","toSide":"top"},
		{"id":"9a672e269aef371d","fromNode":"6a5b93565c27340a","fromSide":"bottom","toNode":"ca2331f8af5f3df6","toSide":"top"},
		{"id":"bc1af4269c87a63c","fromNode":"bab1253eee40d4ba","fromSide":"bottom","toNode":"8c07a554c7fd1c0e","toSide":"top"},
		{"id":"11fd8f6780db6040","fromNode":"19001283cdfcfb7c","fromSide":"top","toNode":"6f5de1b35338a76a","toSide":"bottom"},
		{"id":"9e72c81bc31c5b76","fromNode":"19001283cdfcfb7c","fromSide":"top","toNode":"be7c705f2273114b","toSide":"bottom"},
		{"id":"0c009e1f72d9dedc","fromNode":"0da13bc01ba700c6","fromSide":"left","toNode":"9b418498b1f86f47","toSide":"left","label":"依赖"},
		{"id":"5f99967ed80d0272","fromNode":"a7240897af04a67f","fromSide":"left","toNode":"bc7687771792584e","toSide":"right"}
	]
}